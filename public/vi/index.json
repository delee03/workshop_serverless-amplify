[
{
	"uri": "http://localhost:1313/vi/",
	"title": "Giới thiệu về workshop",
	"tags": [],
	"description": "",
	"content": "Xây dựng ứng dụng web sử dụng AWS Amplify Tổng quan Trong workshop này, bạn sẽ học cách tạo một ứng dụng web full-stack đơn giản sử dụng AWS Amplify. Xuyên suốt workshop, bạn sẽ xây dựng và host một ứng dụng React trên AWS, sử dụng Amplify để thêm tính năng xác thực, dữ liệu, và một hàm serverless để thu thập email của người dùng đã đăng ký và lưu nó vào cơ sở dữ liệu. Sau đó, bạn sẽ triển khai một frontend cho ứng dụng của mình, tích hợp với các tài nguyên đám mây của bạn.\nLược đồ kiến trúc Sơ đồ sau đây cung cấp một hình ảnh trực quan về các dịch vụ được sử dụng trong lab đơn giản này và cách chúng được kết nối. Ứng dụng này sử dụng AWS Amplify, GraphQL API, AWS Lambda, và Amazon DynamoDB.\nKhi bạn đi qua workshop, bạn sẽ tìm hiểu chi tiết về các dịch vụ này và tìm thấy các tài nguyên giúp bạn nắm bắt chúng nhanh chóng.\nNhững gì bạn sẽ đạt được Host: Xây dựng và triển khai một ứng dụng React trên mạng phân phối nội dung toàn cầu (CDN) của AWS.\nAuthenticate: Thêm xác thực vào ứng dụng của bạn để kích hoạt chức năng đăng nhập và đăng xuất.\nDatabase: Tích hợp API thời gian thực, cơ sở dữ liệu và một hàm serverless. Function: Triển khai một hàm lambda được kích hoạt khi người dùng đăng ký vào ứng dụng.\nYêu cầu 1 tài khoản AWS: với quyền quản trị viên\nNodejs and npm: Đã cài đặt trên máy tính của bạn\nGit \u0026amp; GitHub account: Kiến thức cơ bản về Git và GitHub Visual Studio Code: Đã cài đặt trên máy tính của bạn\nNếu bạn có tài khoản AWS FreeTier thì thật tuyệt vời\nCác tài khoản được tạo trong vòng 24 giờ qua có thể chưa có quyền truy cập vào các dịch vụ cần thiết cho lab này\nNội dung chính Giới thiệu Tạo và Triển khai 1 ứng dụng web ReactJS Xây dựng hàm Serverless với AWS Lamda Tạo data table với DynamoDB Liên kết hàm Serverless đến ứng dụng Web Thêm tính tương tác vào ứng dụng web Dọn dẹp tài nguyên "
},
{
	"uri": "http://localhost:1313/vi/5-add-interactivity/1-install-the-amplify-libraries/",
	"title": "Tải Amplify Libraries",
	"tags": [],
	"description": "",
	"content": " Để tải Amplify libraries, chạy câu lệnh sau dưới terminal của bạn:\nnpm install aws-amplify @aws-amplify/ui-react or you can use this command : npm i @aws-amplify/ui-react Lệnh này sẽ tải Amplify libraries và UI components cho React.\n"
},
{
	"uri": "http://localhost:1313/vi/5-add-interactivity/2-style-the-app-ui/",
	"title": "Chỉnh sửa giao diện App",
	"tags": [],
	"description": "",
	"content": "Trên máy cục bộ của bạn, điều hướng đến tệp profilesapp/src/index.css và cập nhật nó với mã sau. Sau đó, lưu tệp lại.\n:root { font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif; line-height: 1.5; font-weight: 400; color: rgba(255, 255, 255, 0.87); font-synthesis: none; text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; max-width: 1280px; margin: 0 auto; padding: 2rem; } .card { padding: 2em; } .read-the-docs { color: #888; } .box:nth-child(3n + 1) { grid-column: 1; } .box:nth-child(3n + 2) { grid-column: 2; } .box:nth-child(3n + 3) { grid-column: 3; } "
},
{
	"uri": "http://localhost:1313/vi/0-introdution/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong workshop này, bạn sẽ học cách tạo một ứng dụng web full-stack đơn giản sử dụng AWS Amplify. Xuyên suốt workshop, bạn sẽ xây dựng và host một ứng dụng React trên AWS, sử dụng Amplify để thêm tính năng xác thực, dữ liệu, và một hàm serverless để thu thập email của người dùng đã đăng ký và lưu nó vào cơ sở dữ liệu. Sau đó, bạn sẽ triển khai một frontend cho ứng dụng của mình, tích hợp với các tài nguyên đám mây của bạn.\nLược đồ kiến trúc Sơ đồ sau đây cung cấp một hình ảnh trực quan về các dịch vụ được sử dụng trong lab đơn giản này và cách chúng được kết nối. Ứng dụng này sử dụng AWS Amplify, GraphQL API, AWS Lambda, và Amazon DynamoDB.\nKhi bạn đi qua workshop, bạn sẽ tìm hiểu chi tiết về các dịch vụ này và tìm thấy các tài nguyên giúp bạn nắm bắt chúng nhanh chóng.\nNhững gì bạn sẽ đạt được Host: Xây dựng và triển khai một ứng dụng React trên mạng phân phối nội dung toàn cầu (CDN) của AWS.\nAuthenticate: Thêm xác thực vào ứng dụng của bạn để kích hoạt chức năng đăng nhập và đăng xuất.\nDatabase: Tích hợp API thời gian thực, cơ sở dữ liệu và một hàm serverless. Function: Triển khai một hàm lambda được kích hoạt khi người dùng đăng ký vào ứng dụng.\nYêu cầu 1 tài khoản AWS: với quyền quản trị viên\nNodejs and npm: Đã cài đặt trên máy tính của bạn\nGit \u0026amp; GitHub account: Kiến thức cơ bản về Git và GitHub Visual Studio Code: Đã cài đặt trên máy tính của bạn\nNếu bạn có tài khoản AWS FreeTier thì thật tuyệt vời\nCác tài khoản được tạo trong vòng 24 giờ qua có thể chưa có quyền truy cập vào các dịch vụ cần thiết cho lab này\nNội dung chính Giới thiệu Tạo và Triển khai 1 ứng dụng web ReactJS Xây dựng hàm Serverless với AWS Lamda Tạo data table với DynamoDB Liên kết hàm Serverless đến ứng dụng Web Thêm tính tương tác vào ứng dụng web Dọn dẹp tài nguyên "
},
{
	"uri": "http://localhost:1313/vi/1-create-a-web-app/",
	"title": "Tạo và triển khai ứng dụng Web với ReactJS",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nTạo 1 ứng dụng ReactJS mới Khởi tạo 1 Github Repository Tải các Amplify packages Triển khai ứng dụng web với AWS Amplify Tạo 1 ứng dụng ReactJS mới Trong phần này, bạn sẽ tạo một ứng dụng React và triển khai nó lên Cloud sử dụng AWS Amplify. AWS Amplify cung cấp một quy trình CI/CD dựa trên Git để xây dựng, triển khai và lưu trữ các ứng dụng web đơn trang hoặc các trang tĩnh với backend. Khi được kết nối với một kho Git, Amplify xác định các thiết lập xây dựng cho cả framework frontend và bất kỳ tài nguyên backend nào đã được cấu hình, và tự động triển khai các cập nhật với mỗi lần commit code.\nBạn sẽ bắt đầu bằng việc tạo một ứng dụng React mới và đẩy nó lên một kho GitHub. Sau đó, bạn sẽ kết nối kho này với dịch vụ lưu trữ web của AWS Amplify và triển khai nó lên một mạng phân phối nội dung (CDN) có sẵn toàn cầu được lưu trữ trên miền amplifyapp.com.\n1. Tạo 1 ứng dụng ReactJS mới Bước 1: Mở trình quản lý tệp của bạn, tạo một thư mục mới và đặt tên là \u0026laquo;Your-Project-Amplify\u0026raquo;, sau đó mở Visual Studio Code với thư mục vừa tạo và mở terminal trong VS Code. Chạy lệnh sau để tạo một ứng dụng React mới sử dụng Vite và React:\nnpm create vite@latest profilesapp -- --template react cd profilesapp npm install npm run dev Bước 2: Trong cửa sổ Terminal, chọn và mở đường dẫn có cổng 5173 để xem 1 ứng dụng React + Vite.\n2. Khởi tạo 1 Github Repository Trong bước này, bạn sẽ tạo một kho GitHub và lưu mã của bạn vào kho này. Bạn sẽ cần một tài khoản GitHub để hoàn thành bước này, nếu bạn chưa có tài khoản, đăng ký tại đây.\nNếu bạn chưa từng sử dụng GitHub trên máy tính của mình, hãy làm theo các bước này trước khi tiếp tục.\nBước 1: Mở một tab trình duyệt mới và điều hướng đến GitHub tại https://github.com\nBước 2: Đăng nhập vào tài khoản GitHub của bạn.\nBước 3: Chọn + ở góc phải của trang home và chọn New repository.\nBước 4: Ở phần Repository name , điền tên repo profile_app.\nMở mã nguồn của bạn đã khởi tạo trong Bước trước, nhấp chuột phải vào profilesapp và chọn Open in Integrated Terminal, sau đó chạy các lệnh sau để khởi tạo git và đẩy ứng dụng lên kho GitHub mới:\nLưu ý: thay thế GitHub URL trong câu lệnh trên bằng GitHub URL của bạn.\nChạy câu lệnh sau trong terminal để đẩy code lên Github:\ngit init git add . git commit -m \u0026#34;first commit\u0026#34; git remote add origin https://github.com/\u0026lt;your-username\u0026gt;/profile_app git branch -M main git push -u origin main 3. Tải các Amplify packages Mở một cửa sổ terminal mới, điều hướng đến thư mục gốc của ứng dụng của bạn (profilesapp) mở trong Integrated Terminal bằng cách nhấp chuột phải vào tệp package.json, mục đích là điều hướng chính xác đến thư mục gốc, và chạy lệnh sau: Chạy lệnh sau Amplify CLI:\nnpm create amplify@latest -y Chạy lệnh trước đó sẽ tạo một dự án Amplify nhỏ bên trong trong thư mục của ứng dụng. Trong cửa sổ Terminal của bạn, chạy lệnh sau để đẩy các thay đổi lên GitHub: git add . git commit -m \u0026#34;Add Amplify installed\u0026#34; git push Nếu bạn đã đẩy thành công các thay đổi lên GitHub, bạn sẽ thấy thông báo sau trong terminal:\n4. Triển khai ứng dụng web với AWS Amplify Đăng nhập vào bảng điều khiển quản lý AWS trong một cửa sổ trình duyệt mới, và mở bảng điều khiển AWS Amplify tại https://console.aws.amazon.com/amplify/. Chọn Deploy tại chính giữa cửa sổ màn hình. Trên trang Bắt đầu xây dựng với Amplify, cho mục Triển khai ứng dụng của bạn, chọn GitHub, và chọn Next. Tiếp theo, xác thực với GitHub bằng cách chọn Authorize AWS Amplify. Chọn kho lưu trữ bạn muốn triển khai trên Amplify, xác thực với GitHub bằng cách chọn Only selected repositories (bạn có thể chọn tất cả các kho lưu trữ, trong trường hợp này tôi chọn Only selected repositories) và chọn Dự án của bạn: Profile_app sau đó nhấp vào Install \u0026amp; Authorize. Bạn sẽ tự động được chuyển hướng về cửa sổ Amplify console, chọn the repository, main branch mà bạn muốn deploy, sau đó chọn Next. Giữ nguyên cài đặt mặc định và chọn Next. Xem lại các thay đổi và nhấn Save and deploy\nAWS Amplify sẽ xây dựng mã nguồn của bạn và triển khai ứng dụng của bạn tại https://...amplifyapp.com, và mỗi lần bạn đẩy mã lên git, phiên bản triển khai của bạn sẽ được cập nhật tự động. Quá trình triển khai ứng dụng ReactJS của bạn có thể mất đến 5 phút.\nMột khi xây dựng hoàn tất, bạn có thể chọn Visit deployed URL và xem website của mình trực tiếp trên môi trường Internet. Bây giờ bạn có thể xem ứng dụng ReactJS đã triển khai của mình trên bảng điều khiển AWS Amplify. Bạn có thể xem tên miền và trạng thái của việc triển khai. Nếu bạn thấy màn hình như này, bạn đã triển khai dự án thành công ứng dụng ReactJS trên AWS Amplify. Good job Bạn đã triển khai một ứng dụng React trên AWS Cloud bằng cách tích hợp với GitHub và sử dụng AWS Amplify. Với AWS Amplify, bạn có thể liên tục triển khai ứng dụng của mình trên Cloud và lưu trữ nó trên một CDN có sẵn toàn cầu.\n"
},
{
	"uri": "http://localhost:1313/vi/5-add-interactivity/3-implement-the-ui/",
	"title": "Triển khai giao diện người dùng",
	"tags": [],
	"description": "",
	"content": " Điều hướng đến tệp profilesapp/src/main.jsx và cập nhật nó với mã sau. Sau đó, lưu tệp. import React from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom/client\u0026#34;; import App from \u0026#34;./App.jsx\u0026#34;; import \u0026#34;./index.css\u0026#34;; import { Authenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; ReactDOM.createRoot(document.getElementById(\u0026#34;root\u0026#34;)).render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Authenticator\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Authenticator\u0026gt; \u0026lt;/React.StrictMode\u0026gt; ); Bạn đã cập nhật tệp main.jsx để bao gồm thành phần Authenticator từ thư viện Amplify UI. Thành phần Authenticator cung cấp một tập hợp các thành phần giao diện người dùng xác thực được xây dựng sẵn mà bạn có thể sử dụng để tạo luồng đăng ký và đăng nhập cho ứng dụng của mình.\nMở tệp profilesapp/src/App.jsx và cập nhật nó với mã sau. Sau đó, lưu tệp. Mã bắt đầu bằng cách cấu hình thư viện Amplify với tệp cấu hình khách hàng (amplify_outputs.json). Sau đó, nó tạo ra một khách hàng dữ liệu bằng cách sử dụng hàm generateClient(). Ứng dụng sẽ sử dụng khách hàng dữ liệu để lấy dữ liệu hồ\nimport { useState, useEffect } from \u0026#34;react\u0026#34;; import { Button, Heading, Flex, View, Grid, Divider, } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import { useAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/data\u0026#34;; import outputs from \u0026#34;../amplify_outputs.json\u0026#34;; /** * @type {import(\u0026#39;aws-amplify/data\u0026#39;).Client\u0026lt;import(\u0026#39;../amplify/data/resource\u0026#39;).Schema\u0026gt;} */ Amplify.configure(outputs); const client = generateClient({ authMode: \u0026#34;userPool\u0026#34;, }); export default function App() { const [userprofiles, setUserProfiles] = useState([]); const { signOut } = useAuthenticator((context) =\u0026gt; [context.user]); useEffect(() =\u0026gt; { fetchUserProfile(); }, []); async function fetchUserProfile() { const { data: profiles } = await client.models.UserProfile.list(); setUserProfiles(profiles); } return ( \u0026lt;Flex className=\u0026#34;App\u0026#34; justifyContent=\u0026#34;center\u0026#34; alignItems=\u0026#34;center\u0026#34; direction=\u0026#34;column\u0026#34; width=\u0026#34;70%\u0026#34; margin=\u0026#34;0 auto\u0026#34; \u0026gt; \u0026lt;Heading level={1}\u0026gt;My Profile\u0026lt;/Heading\u0026gt; \u0026lt;Divider /\u0026gt; \u0026lt;Grid margin=\u0026#34;3rem 0\u0026#34; autoFlow=\u0026#34;column\u0026#34; justifyContent=\u0026#34;center\u0026#34; gap=\u0026#34;2rem\u0026#34; alignContent=\u0026#34;center\u0026#34; \u0026gt; {userprofiles.map((userprofile) =\u0026gt; ( \u0026lt;Flex key={userprofile.id || userprofile.email} direction=\u0026#34;column\u0026#34; justifyContent=\u0026#34;center\u0026#34; alignItems=\u0026#34;center\u0026#34; gap=\u0026#34;2rem\u0026#34; border=\u0026#34;1px solid #ccc\u0026#34; padding=\u0026#34;2rem\u0026#34; borderRadius=\u0026#34;5%\u0026#34; className=\u0026#34;box\u0026#34; \u0026gt; \u0026lt;View\u0026gt; \u0026lt;Heading level=\u0026#34;3\u0026#34;\u0026gt;{userprofile.email}\u0026lt;/Heading\u0026gt; \u0026lt;/View\u0026gt; \u0026lt;/Flex\u0026gt; ))} \u0026lt;/Grid\u0026gt; \u0026lt;Button onClick={signOut}\u0026gt;Sign Out\u0026lt;/Button\u0026gt; \u0026lt;/Flex\u0026gt; ); } Mở một cửa sổ terminal mới, điều hướng đến thư mục gốc của dự án của bạn (profilesapp), và chạy lệnh sau để khởi chạy ứng dụng: npm run dev Chọn đường dẫn localhost với cổng 5173 để mở ứng dụng Vite + React . Chọn Create Account tab, đăng kí tải khoản bằng cách nhập địa chỉ email address và a password. Sau đó, choose Create Account. Bạn sẽ nhận được mã xác minh được gửi đến email của bạn. Nhập mã xác minh để đăng nhập vào ứng dụng. Khi đã đăng nhập, ứng dụng sẽ hiển thị địa chỉ email của bạn và một nút Đăng Xuất. Như bạn có thể thấy, bạn có thể đăng nhập vào ứng dụng và xem thông tin hồ sơ của mình tại localhost.\nBây giờ, bạn có thể đẩy các thay đổi lên kho lưu trữ GitHub của mình bằng cách chạy các lệnh sau trong terminal: git add -A git commit -m \u0026#34;Thêm tính tương tác vào ứng dụng web hiển thị thông tin hồ sơ người dùng\u0026#34; git push AWS Amplify tự động xây dựng mã nguồn của bạn và triển khai ứng dụng của bạn tại https://...amplifyapp.com, và trên mỗi lần git push, phiên bản triển khai của bạn sẽ được cập nhật. Chọn nút Visit deployed URL để xem ứng dụng web của bạn đang chạy trực tiếp, bạn có thể sử dụng tab Host để triển khai ứng dụng của mình lên mạng phân phối nội dung toàn cầu (CDN) của AWS và xem nó trực tuyến trong Amplify Console. Bạn có thể đăng nhập vào ứng dụng và xem thông tin hồ sơ của mình tại URL đã triển khai của bạn.\nBạn đã triển khai thành công giao diện người dùng cho ứng dụng web của mình. Bây giờ bạn có thể xem thông tin hồ sơ của mình và đăng xuất khỏi ứng dụng.\nBây giờ, bạn có thể truy cập vào bảng DynamoDB của mình để xem dữ liệu đã được lưu khi bạn đăng ký. Bước 1: Mở AWS Management Console, chuyển hướng đến DynamoDB console. bạn có thể thấy 2 table được tạo bởi Amplify CLI.\nBước 2: Chọn tabExpolore items , sau đó chọn table UserProfile để xem dữ liệu người dùng đã đăng kí.\n"
},
{
	"uri": "http://localhost:1313/vi/2-build-a-serverlessfunction-lamda/",
	"title": "Xây dựng hàm Serverless với AWS Lamda",
	"tags": [],
	"description": "",
	"content": "Tạo 1 hàm Lambda Trong phần này, bạn sẽ tạo một hàm Lambda được kích hoạt khi người dùng đăng ký vào ứng dụng. Hàm Lambda sẽ thu thập email của người dùng và lưu nó vào cơ sở dữ liệu.\nTrong thư mục dự án của bạn:\nDi chuyển đến thư mục profilesapp/amplify/auth Tạo một thư mục mới bên trong thư mục amplify/auth và đặt tên là post-confirmation Sau đó tạo 2 tệp trong thư mục post-confirmation, đặt tên là resource.ts và handler.ts tương ứng. Cập nhật tệp resource.ts với mã sau, sau đó lưu lại: import { defineFunction } from \u0026#39;@aws-amplify/backend\u0026#39;; export const postConfirmation = defineFunction({ name: \u0026#39;post-confirmation\u0026#39;, }); Cập nhật tệp handler.ts với mã sau, sau đó lưu lại: import type { PostConfirmationTriggerHandler } from \u0026#34;aws-lambda\u0026#34;; export const handler: PostConfirmationTriggerHandler = async (event) =\u0026gt; { return event; }; Bạn đã tạo thành công một hàm Lambda sử dụng Amplify. Hàm được đặt tên là post-confirmation và được kích hoạt khi người dùng đăng ký vào ứng dụng. Hàm trả về đối tượng sự kiện.\n"
},
{
	"uri": "http://localhost:1313/vi/3-create-data-table/",
	"title": "Tạo Data Table với DynamoDB và GraphQL API",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nKhởi tạo Data Table với DynamoDB Cập nhật Lamda function để kết nối tới API Tạo Data Table với DynamoDB Trong phần này, bạn sẽ tạo một mô hình dữ liệu để lưu trữ dữ liệu bằng cách sử dụng GraphQL API và Amazon DynamoDB. Bạn sẽ sử dụng AWS Amplify CLI để tạo một GraphQL API, định nghĩa một mô hình dữ liệu, và triển khai API lên đám mây.\nMở terminal, di chuyển đến thư mục dự án của bạn (profilesapp), và chạy lệnh sau để tạo một mô hình dữ liệu và triển khai API GraphQL: import { type ClientSchema, a, defineData } from \u0026#34;@aws-amplify/backend\u0026#34;; import { postConfirmation } from \u0026#34;../auth/post-confirmation/resource\u0026#34;; const schema = a .schema({ UserProfile: a .model({ email: a.string(), profileOwner: a.string(), }) .authorization((allow) =\u0026gt; [ allow.ownerDefinedIn(\u0026#34;profileOwner\u0026#34;), ]), }) .authorization((allow) =\u0026gt; [allow.resource(postConfirmation)]); export type Schema = ClientSchema\u0026lt;typeof schema\u0026gt;; export const data = defineData({ schema, authorizationModes: { defaultAuthorizationMode: \u0026#34;apiKey\u0026#34;, apiKeyAuthorizationMode: { expiresInDays: 30, }, }, }); Chạy lệnh sau để triển khai tài nguyên backend được xác định trong dự án Amplify của bạn lên AWS. Nó sẽ cung cấp các tài nguyên đám mây cần thiết, chẳng hạn như GraphQL API và bảng DynamoDB, dựa trên cấu hình của dự án của bạn. npx ampx sandbox Sau khi sandbox đám mây đã được triển khai hoàn tất, bạn sẽ thấy một thông báo thành công trong terminal. Tệp amplify-outputs.json sẽ được tạo và thêm vào thư mục dự án của bạn. Mở cửa sổ terminal mới, điều hướng đến thư mục profilesapp, và chạy lệnh sau để tạo GraphQL API: Ví dụ, nếu bạn muốn tạo GraphQL API, hãy chạy lệnh sau:\nnpx ampx generate graphql-client-code --out amplify/auth/post-confirmation/graphql.\nnpx ampx generate graphql-client-code --out \u0026lt;path-to-post-confirmation-handler-dir\u0026gt;/graphql Lệnh này tạo mã client API GraphQL dựa trên schema được định nghĩa trong API GraphQL. Mã được tạo ra sẽ được sử dụng trong phần tiếp theo để tương tác với API GraphQL từ frontend.\nAmplify sẽ tạo thư mục amplify/auth/post-confirmation/graphql nơi bạn sẽ tìm thấy mã client để kết nối với API GraphQL.\nCập nhật Lamda function để kết nối tới API Trong thư mục dự án của bạn: điều hướng đến tệp amplify/auth/post-confirmation/handler.ts và cập nhật tệp với mã sau, sau đó lưu lại.\nimport type { PostConfirmationTriggerHandler } from \u0026#34;aws-lambda\u0026#34;; import { type Schema } from \u0026#34;../../data/resource\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/data\u0026#34;; import { env } from \u0026#34;$amplify/env/post-confirmation\u0026#34;; import { createUserProfile } from \u0026#34;./graphql/mutations\u0026#34;; Amplify.configure( { API: { GraphQL: { endpoint: env.AMPLIFY_DATA_GRAPHQL_ENDPOINT, region: env.AWS_REGION, defaultAuthMode: \u0026#34;iam\u0026#34;, }, }, }, { Auth: { credentialsProvider: { getCredentialsAndIdentityId: async () =\u0026gt; ({ credentials: { accessKeyId: env.AWS_ACCESS_KEY_ID, secretAccessKey: env.AWS_SECRET_ACCESS_KEY, sessionToken: env.AWS_SESSION_TOKEN, }, }), clearCredentialsAndIdentityId: () =\u0026gt; { /* noop */ }, }, }, } ); const client = generateClient\u0026lt;Schema\u0026gt;({ authMode: \u0026#34;iam\u0026#34;, }); export const handler: PostConfirmationTriggerHandler = async (event) =\u0026gt; { await client.graphql({ query: createUserProfile, variables: { input: { email: event.request.userAttributes.email, profileOwner: `${event.request.userAttributes.sub}::${event.userName}`, }, }, }); return event; }; Bạn đã tạo một bảng dữ liệu và cấu hình một API GraphQL để lưu trữ dữ liệu trong cơ sở dữ liệu Amazon DynamoDB. Sau đó, bạn đã cập nhật hàm Lambda để sử dụng API.\n"
},
{
	"uri": "http://localhost:1313/vi/4-link-serverlessfunction-towebapp/",
	"title": "Liên kết hàm Serverless đến ứng dụng Web",
	"tags": [],
	"description": "",
	"content": "Trong phần này, Bạn sẽ cập nhật tài nguyên Amplify Auth để sử dụng hàm Lambda mà bạn đã tạo trong phần trước dưới dạng lệnh gọi trên Amazon Cognito. Khi người dùng hoàn tất đăng ký, hàm này sẽ sử dụng API GraphQL và ghi lại email của người dùng vào bảng DynamoDB.\nSet up Amplify Auth Tài nguyên xác thực của bạn được cấu hình cho phép người dùng đăng ký bằng email, nhưng bạn cần cập nhật tài nguyên để gọi hàm postConfirmation đã tạo trước đó khi người dùng đăng ký. Thêm đoạn code sau đây vào file amplify/auth/resource.ts:\nimport { defineAuth } from \u0026#39;@aws-amplify/backend\u0026#39;; import { postConfirmation } from \u0026#39;./post-confirmation/resource\u0026#39;; export const auth = defineAuth({ loginWith: { email: true, }, triggers: { postConfirmation } }); Sandbox sẽ tự động được cập nhật và triển khai lại khi tệp được cập nhật. Nếu sandbox không chạy, bạn có thể chạy lệnh sau trong cửa sổ terminal mới để khởi động nó. npx ampx sandbox Khi sandbox trên đám mây đã được triển khai hoàn toàn, terminal của bạn sẽ hiển thị thông báo xác nhận và tệp amplify_outputs.json sẽ được tạo/cập nhật và thêm vào dự án profilesapp của bạn. Bạn đã sử dụng Amplify để cấu hình xác thực và cấu hình hàm Lambda để được gọi khi người dùng đăng nhập vào ứng dụng.\n"
},
{
	"uri": "http://localhost:1313/vi/5-add-interactivity/",
	"title": "Thêm tính năng tương tác vào ứng dụng Web",
	"tags": [],
	"description": "",
	"content": "Tổng quan Chào mừng bạn đến với phần tương tác của hội thảo. Trong phần này, bạn sẽ cập nhật trang web mà bạn đã tạo trong task 2 để sử dụng thư viện thành phần Amplify UI để tạo ra toàn bộ luồng xác thực người dùng, cho phép người dùng đăng ký, đăng nhập và đặt lại mật khẩu của họ và gọi API GraphQL mà chúng tôi đã tạo trong phần trước. Điều này sẽ thêm khả năng hiển thị email của người dùng đã được thu thập bằng cách sử dụng một hàm serverless.\n"
},
{
	"uri": "http://localhost:1313/vi/6-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " Tại Amplify console, ở thanh điều hướng bên trái, chọn App settings, sau đó chọn General settings. 2.Tại General settings, chọn Delete app. Tại hộp thoại xóa, gõ delete và chọn Delete app. "
},
{
	"uri": "http://localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]