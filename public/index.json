[
{
	"uri": "//localhost:1313/",
	"title": "Build A Web Application with AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Building a Web Application using AWS Amplify Overview In this workshop, you will learn to create a simple full-stack web application using AWS Amplify. Throughout this workshop, you will build and host a React application on AWS, use Amplify to add authentication, data, and a serverless function to capture the signed-up user\u0026rsquo;s email and save it in the database. Then, you will implement a frontend for your app that integrates with your cloud resources.\nArchitect Schema The following diagram provides a visual representation of the services used in this simple lab and how they are connected. This application uses AWS Amplify, GraphQL API, AWS Lambda, and Amazon DynamoDB.\nAs you go through the workshop, you will learn about the services in detail and find resources that will help you get up to speed with them.\nWhat you will accomplish Host: Build and deploy a React application on the AWS global content delivery network (CDN).\nAuthenticate: Add authentication to your app to enable sign-in and sign-out functionality.\nDatabase: Integrate a real-time API, database, and a serverless function.\nFunction: Implement a lambda function that is triggered when a user signs up to the App.\nRequired An AWS account: with administrator permission\nNodejs and npm: Installed on your computer\nGit \u0026amp; GitHub account: Foundational knowledge of Visual Studio Code: Installed on your computer\nIf you have a FreeTier Account, that\u0026rsquo;s so great\nAccounts created within the past 24 hours might not yet have access to the services required for this lab\nMain content Introduction Create \u0026amp; Deploy a Web Application with ReactJS Build Serverless function with AWS Lamda Create Data Table with DynamoDB Link Serverless function to Web Application Add interactivity to web app Clean up resources "
},
{
	"uri": "//localhost:1313/5-add-interactivity/1-install-the-amplify-libraries/",
	"title": "Install the Amplify Libraries",
	"tags": [],
	"description": "",
	"content": " To install the Amplify libraries, run the following command in your terminal:\nnpm install aws-amplify @aws-amplify/ui-react or you can use this command : npm i @aws-amplify/ui-react This command installs the Amplify libraries and the UI components for React.\n"
},
{
	"uri": "//localhost:1313/5-add-interactivity/2-style-the-app-ui/",
	"title": "Style the App UI",
	"tags": [],
	"description": "",
	"content": "On your local machine, navigate to the profilesapp/src/index.css file and update it with the following code. Then, save the file.\n:root { font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif; line-height: 1.5; font-weight: 400; color: rgba(255, 255, 255, 0.87); font-synthesis: none; text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; max-width: 1280px; margin: 0 auto; padding: 2rem; } .card { padding: 2em; } .read-the-docs { color: #888; } .box:nth-child(3n + 1) { grid-column: 1; } .box:nth-child(3n + 2) { grid-column: 2; } .box:nth-child(3n + 3) { grid-column: 3; } "
},
{
	"uri": "//localhost:1313/0-introdution/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview In this workshop, you will learn to create a simple full-stack web application using AWS Amplify. Throughout this workshop, you will build and host a React application on AWS, use Amplify to add authentication, data, and a serverless function to capture the signed-up user\u0026rsquo;s email and save it in the database. Then, you will implement a frontend for your app that integrates with your cloud resources.\nArchitect Schema The following diagram provides a visual representation of the services used in this simple lab and how they are connected. This application uses AWS Amplify, GraphQL API, AWS Lambda, and Amazon DynamoDB.\nAs you go through the workshop, you will learn about the services in detail and find resources that will help you get up to speed with them.\nWhat you will accomplish Host: Build and deploy a React application on the AWS global content delivery network (CDN).\nAuthenticate: Add authentication to your app to enable sign-in and sign-out functionality.\nDatabase: Integrate a real-time API, database, and a serverless function.\nFunction: Implement a lambda function that is triggered when a user signs up to the App.\nRequired An AWS account: with administrator permission\nNodejs and npm: Installed on your computer\nGit \u0026amp; GitHub account: Foundational knowledge of Visual Studio Code: Installed on your computer\nIf you have a FreeTier Account, that\u0026rsquo;s so great\nAccounts created within the past 24 hours might not yet have access to the services required for this lab\nMain content Introduction Create \u0026amp; Deploy a Web Application with ReactJS Build Serverless function with AWS Lamda Create Data Table with DynamoDB Link Serverless function to Web Application Add interactivity to web app Clean up resources "
},
{
	"uri": "//localhost:1313/1-create-a-web-app/",
	"title": "Create &amp; Deploy a Web Application with ReactJS",
	"tags": [],
	"description": "",
	"content": "Content:\nCreate a new ReactJS Application Initialize a Github Repository Install the Amplify packages Deploy your app with AWS Amplify Create a new ReactJS Application In this task, you will create a React application and deploy it to the Cloud using AWS Amplify. AWS Amplify offers a Git-based CI/CD workflow for building, deploying, and hosting single-page web applications or static sites with backends. When connected to a Git repository, Amplify determines the build settings for both the frontend framework and any configured backend resources, and automatically deploys updates with every code commit.\nIn this task, you will start by creating a new React application and pushing it to a GitHub repository. You will then connect the repository to AWS Amplify web hosting and deploy it to a globally available content delivery network (CDN) hosted on an amplifyapp.com domain.\n1. Create a new React application Step 1: Open you file explorer, create a new folder name it \u0026laquo;Your-Project-Amplify\u0026raquo; and open Visual Studio Code with the folder created open terminal in VS Code run the following command to create a new React application using Vite and React:\nnpm create vite@latest profilesapp -- --template react cd profilesapp npm install npm run dev Step 2: In the terminal window, select and open the Local link 5173 to view the Vite + React application.\n2. Initialize a Github Repository In this step, you will create a GitHub repository and commit your code to the repository. You will need a GitHub account to complete this step, if you do not have an account, sign up here.\nIf you have never used GitHub on your computer, follow these steps before continue.\nStep 1: Open a new browser tab and navigate to GitHub at https://github.com\nStep 2: Sign in to your GitHub account.\nStep 3: Click the + sign in the top right corner of the page and select New repository.\nStep 4: In the Repository name field, enter profile_app.\nStep 5: Open your source code initilized in the previous step, right click on the profilesapp and click Open in Intergrated Terminal, and run the following commands to initialize a git and push of the application to the new GitHub repository:\nNote: Replace the GitHub URL in the command with your GitHub URL.\nRun the following commands in the terminal:\ngit init git add . git commit -m \u0026#34;first commit\u0026#34; git remote add origin https://github.com/\u0026lt;your-username\u0026gt;/profile_app git branch -M main git push -u origin main 3. Install the Amplify packages Open a new terminal window, navigate to your app\u0026rsquo;s root folder (profilesapp) open in Intergrated Terminal above by right click on file package.json, purpose is navigate correctly to root folder, and run the following command: Run the following command to install the Amplify CLI:\nnpm create amplify@latest -y Running the previous command will scaffold a lightweight Amplify project in the appâ€™s directory. In your terminal window, run the following command to push the changes to GitHub: git add . git commit -m \u0026#34;Add Amplify installed\u0026#34; git push If you have successfully pushed the changes to GitHub, you will see the following message in the terminal:\n4. Deploy your app with AWS Amplify Sign in to the AWS Management console in a new browser window, and open the AWS Amplify console at https://console.aws.amazon.com/amplify/. Choose Deploy at the center of the page. On the Start building with Amplify page, for Deploy your app, select GitHub, and select Next. When prompted, authenticate with GitHub by selecting Authorize AWS Amplify. Select repository you want to deploy on Amplify, authenticate with GitHub by selecting Only select repositories (you can choose all repositories, this instance I choose only repositories) and choose Your project : Profile_app after that click Install \u0026amp; Authorize. You will be automatically redirected back to the Amplify console, select the repository, main branch you want to deploy, and then choose Next. Leave the default build settings, and select Next. Review the settings, and select Save and deploy\nAWS Amplify will now build your source code and deploy your app at https://...amplifyapp.com, and on every git push your deployment instance will be update automatically . It may take up to 5 minutes to deploy your ReactJS app.\nOnce the build completely, select the Visit deployed URL button to see your web app up and running live. You can now view your deployed ReactJS app on the AWS Amplify console.You can view you domain name and the status of the deployment. If you see the following screen, your deployment was successful and host a ReactJS app on AWS Amplify perfectly. Good job You have deployed a React application in the AWS Cloud by integrating with GitHub and using AWS Amplify. With AWS Amplify, you can continuously deploy your application in the Cloud and host it on a globally available CDN\n"
},
{
	"uri": "//localhost:1313/5-add-interactivity/3-implement-the-ui/",
	"title": "Implement the UI",
	"tags": [],
	"description": "",
	"content": " Navigate to the profilesapp/src/main.jsx file and update it with the following code. Then, save the file. import React from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom/client\u0026#34;; import App from \u0026#34;./App.jsx\u0026#34;; import \u0026#34;./index.css\u0026#34;; import { Authenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; ReactDOM.createRoot(document.getElementById(\u0026#34;root\u0026#34;)).render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Authenticator\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Authenticator\u0026gt; \u0026lt;/React.StrictMode\u0026gt; ); You have updated the main.jsx file to include the Authenticator component from the Amplify UI library. The Authenticator component provides a set of pre-built authentication UI components that you can use to create a sign-up and sign-in flow for your application.\nOpen the profilesapp/src/App.jsx file, and update it with the following code. Then, save the file. The code starts by configuring the Amplify library with the client configuration file (amplify_outputs.json). It then generates a data client using the generateClient() function. The app will use the data client to get the userâ€™s profile data.\nimport { useState, useEffect } from \u0026#34;react\u0026#34;; import { Button, Heading, Flex, View, Grid, Divider, } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import { useAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/data\u0026#34;; import outputs from \u0026#34;../amplify_outputs.json\u0026#34;; /** * @type {import(\u0026#39;aws-amplify/data\u0026#39;).Client\u0026lt;import(\u0026#39;../amplify/data/resource\u0026#39;).Schema\u0026gt;} */ Amplify.configure(outputs); const client = generateClient({ authMode: \u0026#34;userPool\u0026#34;, }); export default function App() { const [userprofiles, setUserProfiles] = useState([]); const { signOut } = useAuthenticator((context) =\u0026gt; [context.user]); useEffect(() =\u0026gt; { fetchUserProfile(); }, []); async function fetchUserProfile() { const { data: profiles } = await client.models.UserProfile.list(); setUserProfiles(profiles); } return ( \u0026lt;Flex className=\u0026#34;App\u0026#34; justifyContent=\u0026#34;center\u0026#34; alignItems=\u0026#34;center\u0026#34; direction=\u0026#34;column\u0026#34; width=\u0026#34;70%\u0026#34; margin=\u0026#34;0 auto\u0026#34; \u0026gt; \u0026lt;Heading level={1}\u0026gt;My Profile\u0026lt;/Heading\u0026gt; \u0026lt;Divider /\u0026gt; \u0026lt;Grid margin=\u0026#34;3rem 0\u0026#34; autoFlow=\u0026#34;column\u0026#34; justifyContent=\u0026#34;center\u0026#34; gap=\u0026#34;2rem\u0026#34; alignContent=\u0026#34;center\u0026#34; \u0026gt; {userprofiles.map((userprofile) =\u0026gt; ( \u0026lt;Flex key={userprofile.id || userprofile.email} direction=\u0026#34;column\u0026#34; justifyContent=\u0026#34;center\u0026#34; alignItems=\u0026#34;center\u0026#34; gap=\u0026#34;2rem\u0026#34; border=\u0026#34;1px solid #ccc\u0026#34; padding=\u0026#34;2rem\u0026#34; borderRadius=\u0026#34;5%\u0026#34; className=\u0026#34;box\u0026#34; \u0026gt; \u0026lt;View\u0026gt; \u0026lt;Heading level=\u0026#34;3\u0026#34;\u0026gt;{userprofile.email}\u0026lt;/Heading\u0026gt; \u0026lt;/View\u0026gt; \u0026lt;/Flex\u0026gt; ))} \u0026lt;/Grid\u0026gt; \u0026lt;Button onClick={signOut}\u0026gt;Sign Out\u0026lt;/Button\u0026gt; \u0026lt;/Flex\u0026gt; ); } Open a new terminal window, navigate to your projects root directory (profilesapp), and run the following command to launch the app: npm run dev Select the Local host link to open the Vite + React application. Choose the Create Account tab, and use the authentication flow to create a new user by entering your email address and a password. Then, choose Create Account. You will get a verification code sent to your email. Enter the verification code to log in to the app. When signed in, the app will display your email address and a Sign Out button. As you can see, you can login to the app and view your profile information at your localhost.\nNow, you can push the changes to your GitHub repository by running the following commands in your terminal: git add -A git commit -m \u0026#34;Add interactivity to the web app displaying user profile information\u0026#34; git push AWS Amplify automatically builds your source code and deployed your app at https://...amplifyapp.com, and on every git push your deployment instance will update. Select the Visit deployed URL button to see your web app up and running live, you can use the Host tab to deploy your app to the AWS global content delivery network (CDN) and view it online in Amplify Console. You can login to the app and view your profile information at your deployed URL.\nYou have successfully implemented the UI for your web application. You can now view your profile information and sign out of the app.\nYou can now proceed to your DynamoDB table to view the data that was saved when you signed up. Step 1: Open the AWS Management Console, and then navigate to the DynamoDB console. you can see two table created by Amplify CLI.\nStep 2: Choose the Expolore items tab, and then choose the UserProfile table to view the data that was saved when you signed up.\n"
},
{
	"uri": "//localhost:1313/2-build-a-serverlessfunction-lamda/",
	"title": "Build Serverless function with AWS Lamda",
	"tags": [],
	"description": "",
	"content": "Create a Lambda function In this section, you will create a Lambda function that is triggered when a user signs up for the application. The Lambda function will capture the user\u0026rsquo;s email and save it in the database.\nIn you project directory:\nNavigate to the profilesapp/amplify/auth folder Create a new folder inside the amplify/auth folder and name it post-confirmation Then create 2 files inside the post-confirmation folder, name them resource.ts and handler.ts respectively. Update the resource.ts file with the following code, then save it.: import { defineFunction } from \u0026#39;@aws-amplify/backend\u0026#39;; export const postConfirmation = defineFunction({ name: \u0026#39;post-confirmation\u0026#39;, }); Update the hanlder.ts file with the following code, then save it.: import type { PostConfirmationTriggerHandler } from \u0026#34;aws-lambda\u0026#34;; export const handler: PostConfirmationTriggerHandler = async (event) =\u0026gt; { return event; }; You have defined a Lambda function using Amplify. The function is named post-confirmation and is triggered when a user signs up for the application. The function returns the event object.\n"
},
{
	"uri": "//localhost:1313/3-create-data-table/",
	"title": "Creating Data Table with DynamoDB and GraphQL API",
	"tags": [],
	"description": "",
	"content": "Content:\nCreating Data Table with DynamoDB Modify Lamda function to connect to the API Creating Data Table with DynamoDB In this section, you will create a data model to persist data using a GraphQL API and Amazon DynamoDB. You will use the AWS Amplify CLI to create a GraphQL API, define a data model, and deploy the API to the cloud.\nSet up Amplify CLI by running the following command:\nIn your project directory: Navigate to the profilesapp folder, amplify/data/resource.ts and update the file with the following code, then save it. import { type ClientSchema, a, defineData } from \u0026#34;@aws-amplify/backend\u0026#34;; import { postConfirmation } from \u0026#34;../auth/post-confirmation/resource\u0026#34;; const schema = a .schema({ UserProfile: a .model({ email: a.string(), profileOwner: a.string(), }) .authorization((allow) =\u0026gt; [ allow.ownerDefinedIn(\u0026#34;profileOwner\u0026#34;), ]), }) .authorization((allow) =\u0026gt; [allow.resource(postConfirmation)]); export type Schema = ClientSchema\u0026lt;typeof schema\u0026gt;; export const data = defineData({ schema, authorizationModes: { defaultAuthorizationMode: \u0026#34;apiKey\u0026#34;, apiKeyAuthorizationMode: { expiresInDays: 30, }, }, }); Open a new terminal window, navigate to your app\u0026rsquo;s root folder (profilesapp), and run the following command to deploy cloud resources to AWS: npx ampx sandbox This command is used to deploy the backend resources defined in your Amplify project to AWS. It will provision the necessary cloud resources, such as the GraphQL API and DynamoDB table, based on your project\u0026rsquo;s configuration.\nOnce the cloud sandbox has been fully deployed, you will see a success message in the terminal. The file amplify-outputs.json will be generated and add to your project directory. Open the new terminal window, navigate to the profilesapp folder, and run the following command to generate the GraphQL API: For example, if you want to generate the GraphQL API, run the following command:\nnpx ampx generate graphql-client-code --out amplify/auth/post-confirmation/graphql.\nnpx ampx generate graphql-client-code --out \u0026lt;path-to-post-confirmation-handler-dir\u0026gt;/graphql This command generates the GraphQL API client code based on the schema defined in the GraphQL API. The generated code will be used in the next section to interact with the GraphQL API from the frontend.\nAmplify will create the folder amplify/auth/post-confirmation/graphql where you will find the client code to connect to the GraphQL API.\nModify Lamda function to connect to the API In your project directory: navigate to the amplify/auth/post-confirmation/handler.ts file and update the file with the following code, then save it.\nimport type { PostConfirmationTriggerHandler } from \u0026#34;aws-lambda\u0026#34;; import { type Schema } from \u0026#34;../../data/resource\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/data\u0026#34;; import { env } from \u0026#34;$amplify/env/post-confirmation\u0026#34;; import { createUserProfile } from \u0026#34;./graphql/mutations\u0026#34;; Amplify.configure( { API: { GraphQL: { endpoint: env.AMPLIFY_DATA_GRAPHQL_ENDPOINT, region: env.AWS_REGION, defaultAuthMode: \u0026#34;iam\u0026#34;, }, }, }, { Auth: { credentialsProvider: { getCredentialsAndIdentityId: async () =\u0026gt; ({ credentials: { accessKeyId: env.AWS_ACCESS_KEY_ID, secretAccessKey: env.AWS_SECRET_ACCESS_KEY, sessionToken: env.AWS_SESSION_TOKEN, }, }), clearCredentialsAndIdentityId: () =\u0026gt; { /* noop */ }, }, }, } ); const client = generateClient\u0026lt;Schema\u0026gt;({ authMode: \u0026#34;iam\u0026#34;, }); export const handler: PostConfirmationTriggerHandler = async (event) =\u0026gt; { await client.graphql({ query: createUserProfile, variables: { input: { email: event.request.userAttributes.email, profileOwner: `${event.request.userAttributes.sub}::${event.userName}`, }, }, }); return event; }; You have created a data table and configured a GraphQL API to persist data in an Amazon DynamoDB database. Then, you updated the Lambda function to use the API.\n"
},
{
	"uri": "//localhost:1313/4-link-serverlessfunction-towebapp/",
	"title": "Link Serverless function to Web Application",
	"tags": [],
	"description": "",
	"content": "In this section, you will update the Amplify Auth resources to use the Lambda function you created in the previous module as an Amazon Cognito post confirmation invocation. When the user completes the sign up, the function will use the GraphQL API and capture the userâ€™s email into the DynamoDB table.\nSet up Amplify Auth Your auth resource is configured allowing the user to sign up using email, but you need to update the resource to invoke the previously created postConfirmation function when the user signs up. Add the following code to the amplify/auth/resource.ts file:\nimport { defineAuth } from \u0026#39;@aws-amplify/backend\u0026#39;; import { postConfirmation } from \u0026#39;./post-confirmation/resource\u0026#39;; export const auth = defineAuth({ loginWith: { email: true, }, triggers: { postConfirmation } }); The sandbox will automatically get updated and redeployed once the file is updated. If the sandbox is not running, you can run the following command in a new terminal window to start it. npx ampx sandbox Once the cloud sandbox has been fully deployed, your terminal will display a confirmation message and the amplify_outputs.json file will be generated/updated and added to your profilesapp project. You used Amplify to configure auth and configured the Lambda function to be invoked when the user signs in to the app.\n"
},
{
	"uri": "//localhost:1313/5-add-interactivity/",
	"title": "Add Interactivity to Web Application",
	"tags": [],
	"description": "",
	"content": "Overview Welcome to the interactivity section of the workshop. In this section, you will update the website you created in task one to use the Amplify UI component library to scaffold out an entire user authentication flow, allowing users to sign up, sign in, and reset their password and invoke the GraphQL API we created in module three. This will add the ability to display the userâ€™s email that was captured using a serverless function.\n"
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": " In the Amplify console, in the left-hand navigation for the profilesapp, choose App settings, and select General settings. In the General settings section, choose Delete app. In the confirmation dialog box, type delete and choose Delete app. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]